const express = require('express');
const router = express.Router();
const db = require('../config/db');
const { verifyToken } = require('../utils/token');
const { canAccessOrderDetail } = require('../middleware/order_permission');

// üìå T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng
router.post('/', verifyToken, async (req, res) => {
  const userId = req.user.id;
  const { address, phone } = req.body;

  try {
    console.log('‚û°Ô∏è B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng cho user:', userId);

    const [cartItems] = await db.query(
      `SELECT c.product_id, c.quantity, p.price, p.stock
       FROM carts c
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = ?`,
      [userId]
    );

    console.log('üõí Gi·ªè h√†ng:', cartItems);

    if (cartItems.length === 0) {
      console.log('‚ö†Ô∏è Gi·ªè h√†ng tr·ªëng');
      return res.status(400).json({ msg: 'Gi·ªè h√†ng tr·ªëng' });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng kho
    for (const item of cartItems) {
      if (item.quantity > item.stock) {
        console.log(`‚ö†Ô∏è S·∫£n ph·∫©m ${item.product_id} kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho`);
        return res.status(400).json({ msg: `Kh√¥ng ƒë·ªß h√†ng cho s·∫£n ph·∫©m ID ${item.product_id}` });
      }
    }

    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    console.log('üí∞ T·ªïng ti·ªÅn ƒë∆°n h√†ng:', total);

    const [orderResult] = await db.query(
      'INSERT INTO orders (user_id, address, phone, total_amount, status, created_at) VALUES (?, ?, ?, ?, "pending", NOW())',
      [userId, address, phone, total]
    );
    const orderId = orderResult.insertId;
    console.log('üßæ ƒê√£ t·∫°o ƒë∆°n h√†ng, ID:', orderId);

    // Th√™m s·∫£n ph·∫©m v√†o b·∫£ng order_items
    for (const item of cartItems) {
      console.log(`‚ûï Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng:`, item);
      await db.query(
        'INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)',
        [orderId, item.product_id, item.quantity, item.price]
      );

      // Tr·ª´ s·ªë l∆∞·ª£ng trong kho
      await db.query(
        'UPDATE products SET stock = stock - ? WHERE id = ?',
        [item.quantity, item.product_id]
      );
      console.log(`üîª ƒê√£ tr·ª´ ${item.quantity} s·∫£n ph·∫©m ID ${item.product_id} kh·ªèi kho`);
    }

    console.log('‚úÖ ƒê√£ th√™m t·∫•t c·∫£ s·∫£n ph·∫©m v√†o b·∫£ng order_items v√† c·∫≠p nh·∫≠t kho');

    // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
    await db.query('DELETE FROM carts WHERE user_id = ?', [userId]);
    console.log('üßπ ƒê√£ x√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng');

    res.status(201).json({ msg: 'ƒê·∫∑t h√†ng th√†nh c√¥ng', order_id: orderId });
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:', err);
    res.status(500).json({ msg: 'L·ªói khi t·∫°o ƒë∆°n h√†ng' });
  }
});


// üìå L·∫•y ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
router.get('/', verifyToken, async (req, res) => {
  const userId = req.user.id;

  try {
    console.log('üì¶ L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user:', userId);
    const [orders] = await db.query(
      'SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC',
      [userId]
    );
    res.json(orders);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng c·ªßa user:', err);
    res.status(500).json({ msg: 'L·ªói khi l·∫•y ƒë∆°n h√†ng' });
  }
});

// üìå L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (admin ho·∫∑c seller)
router.get('/all', verifyToken, async (req, res) => {
  try {
    console.log('üì¶ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng b·ªüi:', req.user.role);
    let orders = [];

    if (req.user.role === 'admin') {
      const [results] = await db.query(
        `SELECT o.*, u.name as customer_name 
         FROM orders o 
         JOIN users u ON o.user_id = u.id 
         ORDER BY o.created_at DESC`
      );
      orders = results;
    } else if (req.user.role === 'seller') {
      const [results] = await db.query(
        `SELECT DISTINCT o.*, u.name as customer_name
         FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
         JOIN products p ON oi.product_id = p.id
         JOIN users u ON o.user_id = u.id
         WHERE p.seller_id = ?
         ORDER BY o.created_at DESC`,
        [req.user.id]
      );
      orders = results;
    } else {
      console.log('‚ùå Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng');
      return res.status(403).json({ msg: 'Kh√¥ng c√≥ quy·ªÅn' });
    }

    console.log('üìã T·ªïng ƒë∆°n h√†ng l·∫•y ƒë∆∞·ª£c:', orders.length);
    res.json(orders);
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng:', err);
    res.status(500).json({ msg: 'L·ªói khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng' });
  }
});

// üìå L·∫•y chi ti·∫øt 1 ƒë∆°n h√†ng
router.get('/:id', verifyToken, canAccessOrderDetail, async (req, res) => {
  const orderId = req.params.id;

  try {
    console.log('üîç L·∫•y chi ti·∫øt ƒë∆°n h√†ng ID:', orderId);

    const [[order]] = await db.query('SELECT * FROM orders WHERE id = ?', [orderId]);
    console.log('üìÑ Th√¥ng tin ƒë∆°n h√†ng:', order);

    const [items] = await db.query(
      `SELECT oi.*, p.name, p.image 
       FROM order_items oi
       JOIN products p ON oi.product_id = p.id
       WHERE oi.order_id = ?`,
      [orderId]
    );
    console.log('üì¶ Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng:', items.length);

    res.json({ order, items });
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:', err);
    res.status(500).json({ msg: 'L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng' });
  }
});

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
router.put('/:id/status', verifyToken, async (req, res) => {
  const orderId = req.params.id;
  const { status } = req.body;
  const userId = req.user.id;
  const userRole = req.user.role;

  try {
    console.log(`üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ${orderId} th√†nh "${status}"`);

    // L·∫•y th√¥ng tin ƒë∆°n h√†ng
    const [order] = await db.query('SELECT * FROM orders WHERE id = ?', [orderId]);

    if (!order) {
      return res.status(404).json({ msg: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i' });
    }

    // N·∫øu ng∆∞·ªùi d√πng l√† admin ho·∫∑c seller c·ªßa s·∫£n ph·∫©m trong ƒë∆°n h√†ng
    if (userRole === 'admin') {
      // Admin c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ ƒë∆°n h√†ng
      console.log('‚úÖ Admin c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng');
    } else if (userRole === 'seller') {
      // Seller ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng c·ªßa m√¨nh
      const [orderItems] = await db.query('SELECT * FROM order_items WHERE order_id = ?', [orderId]);

      const isSellerProduct = orderItems.some(item => item.product_id && item.seller_id === userId);  // Ki·ªÉm tra seller l√† ng∆∞·ªùi b√°n s·∫£n ph·∫©m trong ƒë∆°n h√†ng

      if (!isSellerProduct) {
        return res.status(403).json({ msg: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng n√†y' });
      }
    } else {
      // N·∫øu kh√¥ng ph·∫£i admin ho·∫∑c seller h·ª£p l·ªá
      return res.status(403).json({ msg: 'Kh√¥ng c√≥ quy·ªÅn' });
    }

    // N·∫øu tr·∫°ng th√°i m·ªõi l√† "canceled", ho√†n l·∫°i stock cho t·ª´ng s·∫£n ph·∫©m
    if (status === 'canceled') {
      console.log(`‚õî ƒê∆°n h√†ng ${orderId} b·ªã h·ªßy, ho√†n l·∫°i kho h√†ng`);

      // L·∫•y danh s√°ch c√°c s·∫£n ph·∫©m trong ƒë∆°n h√†ng
      const [orderItems] = await db.query(
        'SELECT oi.product_id, oi.quantity FROM order_items oi WHERE oi.order_id = ?',
        [orderId]
      );

      // Ho√†n l·∫°i stock cho t·ª´ng s·∫£n ph·∫©m, ƒë·∫£m b·∫£o stock kh√¥ng v∆∞·ª£t qu√° 100
      for (const item of orderItems) {
        const [[product]] = await db.query(
          'SELECT stock FROM products WHERE id = ?',
          [item.product_id]
        );

        const newStock = Math.min(100, product.stock + item.quantity); // ƒê·∫£m b·∫£o stock kh√¥ng v∆∞·ª£t qu√° 100
        await db.query(
          'UPDATE products SET stock = ? WHERE id = ?',
          [newStock, item.product_id]
        );
        console.log(`üîÑ ƒê√£ ho√†n l·∫°i ${item.quantity} s·∫£n ph·∫©m ID ${item.product_id} v√†o kho, stock hi·ªán t·∫°i: ${newStock}`);
      }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    await db.query('UPDATE orders SET status = ? WHERE id = ?', [status, orderId]);

    res.json({ msg: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:', err);
    res.status(500).json({ msg: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' });
  }
});


module.exports = router;
