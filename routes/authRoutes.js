const express = require('express');
const router = express.Router();
const pool = require('../config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const moment = require('moment'); // d√πng ƒë·ªÉ l·∫•y th·ªùi gian hi·ªán t·∫°i n·∫øu b·∫°n th√≠ch ƒë·ªãnh d·∫°ng r√µ r√†ng
const { verifyToken } = require('../utils/token'); // C·∫≠p nh·∫≠t ƒë√∫ng path t·ªõi file token.js
// ƒêƒÉng k√Ω
router.post('/register', async (req, res) => {
    const { name, email, password, role, phone, image } = req.body;
    try {
      const [existing] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
      if (existing.length > 0) {
        console.log(`ƒêƒÉng k√Ω th·∫•t b·∫°i: email ${email} ƒë√£ t·ªìn t·∫°i`);
        return res.status(400).json({ msg: 'Email ƒë√£ t·ªìn t·∫°i' });
      }
  
      const hashedPassword = await bcrypt.hash(password, 10);
      const createdAt = moment().format('YYYY-MM-DD HH:mm:ss');
  
      await pool.query(
        'INSERT INTO users (name, email, password, role, phone, image, is_verified, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [name, email, hashedPassword, role, phone || null, image || null, 0, createdAt]
      );
  
      console.log(`ƒêƒÉng k√Ω th√†nh c√¥ng: ${email}`);
      res.status(201).json({ msg: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
    } catch (err) {
      console.error('L·ªói khi ƒëƒÉng k√Ω:', err);
      res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
  });

// ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    try {
        const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        const user = users[0];
        if (!user) {
            console.log(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ${email}`);
            return res.status(400).json({ msg: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' });
        }

        const match = await bcrypt.compare(password, user.password);
        if (!match) {
            console.log(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Sai m·∫≠t kh·∫©u cho ${email}`);
            return res.status(400).json({ msg: 'Sai m·∫≠t kh·∫©u' });
        }

        const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '7d' });
        console.log(`ƒêƒÉng nh·∫≠p th√†nh c√¥ng: ${email}`);
        res.json({ token, user: { id: user.id, name: user.name, email: user.email, role: user.role } });
    } catch (err) {
        console.error('L·ªói khi ƒëƒÉng nh·∫≠p:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});

router.post('/forgot-password', async (req, res) => {
    const { email } = req.body;

    try {
        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
        const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        if (users.length === 0) {
            console.log(`‚ùå Qu√™n m·∫≠t kh·∫©u th·∫•t b·∫°i: Email ${email} kh√¥ng t·ªìn t·∫°i`);
            return res.status(400).json({ msg: 'Email kh√¥ng t·ªìn t·∫°i' });
        }

        // T·∫°o OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
        const otp = Math.floor(100000 + Math.random() * 900000).toString();

        // Xo√° OTP c≈© (n·∫øu c√≥) v√† l∆∞u OTP m·ªõi
        await pool.query('DELETE FROM reset_tokens WHERE email = ?', [email]);
        await pool.query(
            'INSERT INTO reset_tokens (email, otp, created_at) VALUES (?, ?, NOW())',
            [email, otp]
        );

        console.log(`‚úÖ ƒê√£ t·∫°o v√† l∆∞u OTP cho ${email}: ${otp}`);

        // T·∫°o transporter v·ªõi Gmail
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS, // Nh·ªõ: ph·∫£i l√† App Password n·∫øu b·∫≠t 2FA
            },
        });

        // G·ª≠i email
        await transporter.sendMail({
            from: `"Ecommerce Shop" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: 'M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
            html: `
                <div style="font-family: Arial, sans-serif; font-size: 16px;">
                    <p>Xin ch√†o,</p>
                    <p>ƒê√¢y l√† m√£ OTP ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u t√†i kho·∫£n <b>Ecommerce Shop</b> c·ªßa b·∫°n:</p>
                    <h2 style="color: #007bff;">${otp}</h2>
                    <p>M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau <b>5 ph√∫t</b>.</p>
                    <p>Tr√¢n tr·ªçng,<br>Ecommerce Shop Team</p>
                </div>
            `,
        });

        console.log(`üì® ƒê√£ g·ª≠i OTP t·ªõi email ${email}`);
        res.json({ msg: 'ƒê√£ g·ª≠i OTP qua email' });

    } catch (err) {
        console.error('‚ùå L·ªói khi g·ª≠i OTP:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
router.post('/reset-password',verifyToken, async (req, res) => {
    const { email, otp, newPassword } = req.body;

    try {
        // L·∫•y b·∫£n ghi reset_token t∆∞∆°ng ·ª©ng
        const [tokens] = await pool.query(
            'SELECT * FROM reset_tokens WHERE email = ? AND otp = ?', 
            [email, otp]
        );
        console.log('Ng∆∞·ªùi d√πng x√°c th·ª±c:', req.user);
        // Ki·ªÉm tra t·ªìn t·∫°i
        if (tokens.length === 0) {
            console.log(`‚ùå OTP kh√¥ng h·ª£p l·ªá cho ${email}`);
            return res.status(400).json({ msg: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
        }

        const tokenData = tokens[0];
        const createdAt = new Date(tokenData.created_at);
        const now = new Date();

        // Ki·ªÉm tra qu√° 5 ph√∫t ch∆∞a
        const diffMs = now - createdAt;
        const diffMinutes = diffMs / (1000 * 60);

        if (diffMinutes > 5) {
            console.log(`‚ùå OTP ƒë√£ h·∫øt h·∫°n cho ${email}`);
            await pool.query('DELETE FROM reset_tokens WHERE email = ?', [email]); // Xo√° lu√¥n OTP h·∫øt h·∫°n
            return res.status(400).json({ msg: 'OTP ƒë√£ h·∫øt h·∫°n' });
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi (hash)
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await pool.query('UPDATE users SET password = ? WHERE email = ?', [hashedPassword, email]);

        // Xo√° OTP sau khi d√πng
        await pool.query('DELETE FROM reset_tokens WHERE email = ?', [email]);

        console.log(`‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho ${email}`);
        console.log(`‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng: ${newPassword}`);
        res.json({ msg: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });

    } catch (err) {
        console.error('‚ùå L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});



// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
router.put('/update-profile/:id', async (req, res) => {
    const { id } = req.params;
    const { name, email, role } = req.body;

    console.log('===== Y√äU C·∫¶U C·∫¨P NH·∫¨T PROFILE =====');
    console.log('User ID:', id);
    console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', { name, email, role });

    try {
        const [existing] = await pool.query('SELECT * FROM users WHERE id = ?', [id]);
        if (existing.length === 0) {
            console.warn(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi id: ${id}`);
            return res.status(404).json({ msg: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        await pool.query(
            'UPDATE users SET name = ?, email = ?, role = ? WHERE id = ?',
            [name, email, role, id]
        );

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t user id ${id} th√†nh c√¥ng.`);

        res.json({ msg: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
    } catch (err) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});

// ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
router.get('/profile/:id', async (req, res) => {
    const { id } = req.params;

    console.log('Y√™u c·∫ßu l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', id);

    try {
        const [users] = await pool.query('SELECT id, name, email, role, image FROM users WHERE id = ?', [id]);
        if (users.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
            return res.status(404).json({ msg: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        res.json(users[0]);
    } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});

// ‚úÖ ƒê·ªïi m·∫≠t kh·∫©u sau khi ƒë√£ ƒëƒÉng nh·∫≠p
router.put('/change-password/:id',verifyToken, async (req, res) => {
    const { id } = req.params;
    const { oldPassword, newPassword } = req.body;

    console.log('Y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u t·ª´ user ID:', id);
    console.log('Ng∆∞·ªùi d√πng x√°c th·ª±c:', req.user);
    try {
        const [users] = await pool.query('SELECT * FROM users WHERE id = ?', [id]);
        if (users.length === 0) return res.status(404).json({ msg: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });

        const user = users[0];
        const isMatch = await bcrypt.compare(oldPassword, user.password);
        if (!isMatch) return res.status(400).json({ msg: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });

        const hashed = await bcrypt.hash(newPassword, 10);
        await pool.query('UPDATE users SET password = ? WHERE id = ?', [hashed, id]);

        console.log('‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho user ID:', id);
        console.log('‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho user:', newPassword);
        res.json({ msg: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
    } catch (err) {
        console.error('‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});

// G·ª≠i y√™u c·∫ßu x√°c minh (User)
router.post('/verify-request', verifyToken, async (req, res) => {
    const userId = req.user.id;

    try {
        // Ki·ªÉm tra ƒë√£ g·ª≠i y√™u c·∫ßu ch∆∞a
        const [existing] = await pool.query(
            'SELECT * FROM verification_requests WHERE user_id = ? AND status = "pending"',
            [userId]
        );
        if (existing.length > 0) {
            return res.status(400).json({ msg: 'B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu x√°c minh tr∆∞·ªõc ƒë√≥' });
        }

        // G·ª≠i y√™u c·∫ßu m·ªõi
        await pool.query('INSERT INTO verification_requests (user_id) VALUES (?)', [userId]);
        console.log(`‚úÖ User ${userId} ƒë√£ g·ª≠i y√™u c·∫ßu x√°c minh`);
        res.json({ msg: 'Y√™u c·∫ßu x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
    } catch (err) {
        console.error('‚ùå L·ªói g·ª≠i y√™u c·∫ßu x√°c minh:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


// L·∫•y tr·∫°ng th√°i x√°c minh (Public)
router.get('/verify-status/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const [[user]] = await pool.query('SELECT is_verified FROM users WHERE id = ?', [id]);
        if (!user) return res.status(404).json({ msg: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });

        const [request] = await pool.query(
            'SELECT status FROM verification_requests WHERE user_id = ? ORDER BY created_at DESC LIMIT 1',
            [id]
        );

        res.json({
            is_verified: !!user.is_verified,
            request_status: request.length > 0 ? request[0].status : null
        });
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y tr·∫°ng th√°i x√°c minh:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


// (Admin) L·∫•y danh s√°ch y√™u c·∫ßu x√°c minh
router.get('/verify-requests', verifyToken, async (req, res) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ msg: 'B·∫°n kh√¥ng c√≥ quy·ªÅn' });
    }

    try {
        const [requests] = await pool.query(`
            SELECT vr.id, vr.user_id, u.name, u.email, vr.status, vr.created_at
            FROM verification_requests vr
            JOIN users u ON vr.user_id = u.id
            ORDER BY vr.created_at DESC
        `);
        res.json(requests);
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y danh s√°ch y√™u c·∫ßu x√°c minh:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


// (Admin) Duy·ªát x√°c minh
router.put('/verify-request/:id/approve', verifyToken, async (req, res) => {
    const requestId = req.params.id;

    if (req.user.role !== 'admin') {
        return res.status(403).json({ msg: 'B·∫°n kh√¥ng c√≥ quy·ªÅn' });
    }

    try {
        const [[request]] = await pool.query('SELECT * FROM verification_requests WHERE id = ?', [requestId]);
        if (!request) return res.status(404).json({ msg: 'Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i' });

        await pool.query('UPDATE verification_requests SET status = "approved" WHERE id = ?', [requestId]);
        await pool.query('UPDATE users SET is_verified = 1 WHERE id = ?', [request.user_id]);

        console.log(`‚úÖ Duy·ªát x√°c minh cho user ${request.user_id}`);
        res.json({ msg: 'ƒê√£ duy·ªát x√°c minh' });
    } catch (err) {
        console.error('‚ùå L·ªói duy·ªát x√°c minh:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


// (Admin) T·ª´ ch·ªëi x√°c minh
router.put('/verify-request/:id/reject', verifyToken, async (req, res) => {
    const requestId = req.params.id;

    if (req.user.role !== 'admin') {
        return res.status(403).json({ msg: 'B·∫°n kh√¥ng c√≥ quy·ªÅn' });
    }

    try {
        const [[request]] = await pool.query('SELECT * FROM verification_requests WHERE id = ?', [requestId]);
        if (!request) return res.status(404).json({ msg: 'Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i' });

        await pool.query('UPDATE verification_requests SET status = "rejected" WHERE id = ?', [requestId]);

        console.log(`‚ùå T·ª´ ch·ªëi x√°c minh user ${request.user_id}`);
        res.json({ msg: 'ƒê√£ t·ª´ ch·ªëi x√°c minh' });
    } catch (err) {
        console.error('‚ùå L·ªói t·ª´ ch·ªëi x√°c minh:', err);
        res.status(500).json({ msg: 'L·ªói server', error: err.message });
    }
});


module.exports = router;
