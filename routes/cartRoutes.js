const express = require('express');
const router = express.Router();
const db = require('../config/db');
const { verifyToken } = require('../utils/token');
const { isSelfOrAdmin } = require('../middleware/role_admin_seller');

// üìå L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè c·ªßa user
router.get('/', verifyToken, async (req, res) => {
  const userId = req.user.id;

  try {
    const [cartItems] = await db.query(
      `SELECT c.id, c.product_id, c.quantity, p.name, p.price, p.image 
       FROM carts c
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = ?`,
      [userId]
    );

    res.json(cartItems);
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'L·ªói khi l·∫•y gi·ªè h√†ng' });
  }
});

// üìå Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
router.post('/', verifyToken, async (req, res) => {
  const userId = req.user.id;
  const { product_id } = req.body;

  // M·∫∑c ƒë·ªãnh m·ªói l·∫ßn th√™m l√† 1 s·∫£n ph·∫©m
  const quantityToAdd = 1;

  console.log('üü° Ng∆∞·ªùi d√πng ID:', userId);
  console.log('üü° S·∫£n ph·∫©m th√™m v√†o:', product_id);

  if (!product_id) {
    console.log('‚ùå Thi·∫øu product_id');
    return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin s·∫£n ph·∫©m' });
  }

  const conn = await db.getConnection();
  try {
    await conn.beginTransaction();

    // 1. Ki·ªÉm tra s·∫£n ph·∫©m
    const [[product]] = await conn.query(
      'SELECT id, price, stock, image FROM products WHERE id = ?',
      [product_id]
    );
    console.log('üì¶ D·ªØ li·ªáu s·∫£n ph·∫©m:', product);

    if (!product) {
      console.log('‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i');
      return res.status(404).json({ error: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });
    }

    // 2. Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a, c·∫ßn ki·ªÉm tra theo userId v√† productId
    const [[existingItem]] = await conn.query(
      'SELECT id, quantity FROM carts WHERE user_id = ? AND product_id = ?',
      [userId, product_id]
    );
    console.log('üì• S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè:', existingItem);

    if (existingItem) {
      const newQuantity = existingItem.quantity;

      if (product.stock < newQuantity) {
        console.log(`‚ùå V∆∞·ª£t t·ªìn kho: hi·ªán t·∫°i ${product.stock}, y√™u c·∫ßu ${newQuantity}`);
        return res.status(400).json({ error: `Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho` });
      }

      await conn.query(
        'UPDATE carts SET quantity = ? WHERE id = ?',
        [newQuantity, existingItem.id]
      );
      console.log(`‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng ID ${existingItem.id} th√†nh ${newQuantity}`);
    } else {
      if (product.stock < 1) {
        console.log('‚ùå S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng');
        return res.status(400).json({ error: 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng' });
      }

      await conn.query(
        'INSERT INTO carts (user_id, product_id, quantity, image) VALUES (?, ?, ?, ?)',
        [userId, product_id, quantityToAdd, product.image]
      );
      console.log('‚úÖ Th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè');
    }

    await conn.commit();

    // 3. Tr·∫£ v·ªÅ item m·ªõi nh·∫•t
    const [[newCartItem]] = await conn.query(
      `SELECT c.*, p.name, p.price, p.image 
       FROM carts c 
       JOIN products p ON c.product_id = p.id
       WHERE c.user_id = ? AND c.product_id = ?`,
      [userId, product_id]
    );
    console.log('üéÅ Tr·∫£ v·ªÅ gi·ªè h√†ng:', newCartItem);

    res.status(201).json({
      success: true,
      data: newCartItem
    });

  } catch (err) {
    await conn.rollback();
    console.error('‚ùå L·ªói gi·ªè h√†ng:', err);
    res.status(500).json({ error: 'L·ªói h·ªá th·ªëng' });
  } finally {
    conn.release();
  }
});





// üìå C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
router.put('/:id', verifyToken, async (req, res) => {
  const cartId = req.params.id;
  const { quantity } = req.body;

  console.log('üîÑ Y√™u c·∫ßu c·∫≠p nh·∫≠t gi·ªè h√†ng ID:', cartId);
  console.log('üì¶ S·ªë l∆∞·ª£ng y√™u c·∫ßu c·∫≠p nh·∫≠t:', quantity);
  console.log('üë§ ID ng∆∞·ªùi d√πng:', req.user.id);

  if (!quantity || quantity < 1) {
    console.log('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá');
    return res.status(400).json({ msg: 'S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const [[item]] = await db.query('SELECT * FROM carts WHERE id = ?', [cartId]);
    console.log('üì• S·∫£n ph·∫©m trong gi·ªè:', item);

    if (!item || item.user_id !== req.user.id) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng ƒë√∫ng ng∆∞·ªùi d√πng');
      return res.status(404).json({ msg: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè' });
    }

    await db.query('UPDATE carts SET quantity = ? WHERE id = ?', [quantity, cartId]);
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng ID ${cartId} th√†nh s·ªë l∆∞·ª£ng ${quantity}`);

    res.json({ msg: 'C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:', err);
    res.status(500).json({ msg: 'L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng' });
  }
});


// üìå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
router.delete('/:id', verifyToken, async (req, res) => {
  const cartId = req.params.id;

  try {
    const [[item]] = await db.query('SELECT * FROM carts WHERE id = ?', [cartId]);
    if (!item || item.user_id !== req.user.id) {
      return res.status(404).json({ msg: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè' });
    }

    await db.query('DELETE FROM carts WHERE id = ?', [cartId]);
    res.json({ msg: 'ƒê√£ x√≥a kh·ªèi gi·ªè h√†ng' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: 'L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng' });
  }
});

module.exports = router;
